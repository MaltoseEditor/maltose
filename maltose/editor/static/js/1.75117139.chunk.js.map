{"version":3,"sources":["../node_modules/monaco-editor/esm/vs/basic-languages/markdown/markdown.js"],"names":["__webpack_require__","r","__webpack_exports__","d","conf","language","comments","blockComment","brackets","autoClosingPairs","open","close","notIn","surroundingPairs","folding","markers","start","RegExp","end","defaultToken","tokenPostfix","control","noncontrol","escapes","jsescapes","empty","tokenizer","root","token","next","nextEmbedded","include","codeblock","codeblockgh","linecontent","html","cases","@empty","@default","comment","tag","switchTo","$S2==style","$S2==script","$S3","embeddedStyle","embeddedScript"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,yBAAAE,IAAAJ,EAAAG,EAAAD,EAAA,6BAAAG,IAMO,IAAAD,EAAA,CACPE,SAAA,CACAC,aAAA,sBAEAC,SAAA,MAAgB,KAAK,qBACrBC,iBAAA,EACAC,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,IACAC,MAAA,aAEAC,iBAAA,EACAH,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,KACG,CACHD,KAAA,IACAC,MAAA,MAEAG,QAAA,CACAC,QAAA,CACAC,MAAA,IAAAC,OAAA,uCACAC,IAAA,IAAAD,OAAA,6CAIOZ,EAAA,CACPc,aAAA,GACAC,aAAA,MAEAC,QAAA,yBACAC,WAAA,0BACAC,QAAA,iBAEAC,UAAA,8CAEAC,MAAA,iGACAC,UAAA,CACAC,KAAA,CACA,iDAAe,yCACf,+BACA,yCACA,qBACA,qCACA,uBAAiB,UACjB,qCACAC,MAAA,SACAC,KAAA,eAEA,oCACAD,MAAA,SACAC,KAAA,eACAC,aAAA,OAEA,gBACAF,MAAA,SACAC,KAAA,eAEA,CACAE,QAAA,iBAEAC,UAAA,iBACAJ,MAAA,SACAC,KAAA,SACK,gBACLD,MAAA,SACAC,KAAA,SACK,2BAELI,YAAA,aACAL,MAAA,kBACAC,KAAA,OACAC,aAAA,SACK,6BACLI,YAAA,CACA,SAAW,uCACX,qMACA,eAAgB,sJAChB,CACAH,QAAA,SAOAI,KAAA,CACA,+BACAC,MAAA,CACAC,SAAA,CACAT,MAAA,MACAC,KAAA,WAEAS,WAAA,CACAV,MAAA,MACAC,KAAA,cAGK,iBACLD,MAAA,QACK,+BACLW,QAAA,wHAEAC,IAAA,+GACAZ,MAAA,cACAa,SAAA,eACK,uGACLb,MAAA,cACAa,SAAA,eACK,oKACLL,MAAA,CACAM,aAAA,CACAd,MAAA,MACAa,SAAA,gBACAX,aAAA,YAEAa,cAAA,CACAP,MAAA,CACAQ,IAAA,CACAhB,MAAA,MACAa,SAAA,iBACAX,aAAA,OAEAQ,WAAA,CACAV,MAAA,MACAa,SAAA,iBACAX,aAAA,qBAIAQ,WAAA,CACAV,MAAA,MACAC,KAAA,YAIAgB,cAAA,+BACAjB,MAAA,WACAC,KAAA,OACAC,aAAA,SACK,UACLgB,eAAA,gCACAlB,MAAA,WACAC,KAAA,OACAC,aAAA,SACK","file":"static/js/1.75117139.chunk.js","sourcesContent":["/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nexport var conf = {\n  comments: {\n    blockComment: ['<!--', '-->']\n  },\n  brackets: [['{', '}'], ['[', ']'], ['(', ')']],\n  autoClosingPairs: [{\n    open: '{',\n    close: '}'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '(',\n    close: ')'\n  }, {\n    open: '<',\n    close: '>',\n    notIn: ['string']\n  }],\n  surroundingPairs: [{\n    open: '(',\n    close: ')'\n  }, {\n    open: '[',\n    close: ']'\n  }, {\n    open: '`',\n    close: '`'\n  }],\n  folding: {\n    markers: {\n      start: new RegExp(\"^\\\\s*<!--\\\\s*#?region\\\\b.*-->\"),\n      end: new RegExp(\"^\\\\s*<!--\\\\s*#?endregion\\\\b.*-->\")\n    }\n  }\n};\nexport var language = {\n  defaultToken: '',\n  tokenPostfix: '.md',\n  // escape codes\n  control: /[\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n  noncontrol: /[^\\\\`*_\\[\\]{}()#+\\-\\.!]/,\n  escapes: /\\\\(?:@control)/,\n  // escape codes for javascript/CSS strings\n  jsescapes: /\\\\(?:[btnfr\\\\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,\n  // non matched elements\n  empty: ['area', 'base', 'basefont', 'br', 'col', 'frame', 'hr', 'img', 'input', 'isindex', 'link', 'meta', 'param'],\n  tokenizer: {\n    root: [// headers (with #)\n    [/^(\\s{0,3})(#+)((?:[^\\\\#]|@escapes)+)((?:#+)?)/, ['white', 'keyword', 'keyword', 'keyword']], // headers (with =)\n    [/^\\s*(=+|\\-+)\\s*$/, 'keyword'], // headers (with ***)\n    [/^\\s*((\\*[ ]?)+)\\s*$/, 'meta.separator'], // quote\n    [/^\\s*>+/, 'comment'], // list (starting with * or number)\n    [/^\\s*([\\*\\-+:]|\\d+\\.)\\s/, 'keyword'], // code block (4 spaces indent)\n    [/^(\\t|[ ]{4})[^ ].*$/, 'string'], // code block (3 tilde)\n    [/^\\s*~~~\\s*((?:\\w|[\\/\\-#])+)?\\s*$/, {\n      token: 'string',\n      next: '@codeblock'\n    }], // github style code blocks (with backticks and language)\n    [/^\\s*```\\s*((?:\\w|[\\/\\-#])+)\\s*$/, {\n      token: 'string',\n      next: '@codeblockgh',\n      nextEmbedded: '$1'\n    }], // github style code blocks (with backticks but no language)\n    [/^\\s*```\\s*$/, {\n      token: 'string',\n      next: '@codeblock'\n    }], // markup within lines\n    {\n      include: '@linecontent'\n    }],\n    codeblock: [[/^\\s*~~~\\s*$/, {\n      token: 'string',\n      next: '@pop'\n    }], [/^\\s*```\\s*$/, {\n      token: 'string',\n      next: '@pop'\n    }], [/.*$/, 'variable.source']],\n    // github style code blocks\n    codeblockgh: [[/```\\s*$/, {\n      token: 'variable.source',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/[^`]+/, 'variable.source']],\n    linecontent: [// escapes\n    [/&\\w+;/, 'string.escape'], [/@escapes/, 'escape'], // various markup\n    [/\\b__([^\\\\_]|@escapes|_(?!_))+__\\b/, 'strong'], [/\\*\\*([^\\\\*]|@escapes|\\*(?!\\*))+\\*\\*/, 'strong'], [/\\b_[^_]+_\\b/, 'emphasis'], [/\\*([^\\\\*]|@escapes)+\\*/, 'emphasis'], [/`([^\\\\`]|@escapes)+`/, 'variable'], // links\n    [/\\{+[^}]+\\}+/, 'string.target'], [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\]\\([^\\)]+\\))/, ['string.link', '', 'string.link']], [/(!?\\[)((?:[^\\]\\\\]|@escapes)*)(\\])/, 'string.link'], // or html\n    {\n      include: 'html'\n    }],\n    // Note: it is tempting to rather switch to the real HTML mode instead of building our own here\n    // but currently there is a limitation in Monarch that prevents us from doing it: The opening\n    // '<' would start the HTML mode, however there is no way to jump 1 character back to let the\n    // HTML mode also tokenize the opening angle bracket. Thus, even though we could jump to HTML,\n    // we cannot correctly tokenize it in that mode yet.\n    html: [// html tags\n    [/<(\\w+)\\/>/, 'tag'], [/<(\\w+)/, {\n      cases: {\n        '@empty': {\n          token: 'tag',\n          next: '@tag.$1'\n        },\n        '@default': {\n          token: 'tag',\n          next: '@tag.$1'\n        }\n      }\n    }], [/<\\/(\\w+)\\s*>/, {\n      token: 'tag'\n    }], [/<!--/, 'comment', '@comment']],\n    comment: [[/[^<\\-]+/, 'comment.content'], [/-->/, 'comment', '@pop'], [/<!--/, 'comment.content.invalid'], [/[<\\-]/, 'comment.content']],\n    // Almost full HTML tag matching, complete with embedded scripts & styles\n    tag: [[/[ \\t\\r\\n]+/, 'white'], [/(type)(\\s*=\\s*)(\")([^\"]+)(\")/, ['attribute.name.html', 'delimiter.html', 'string.html', {\n      token: 'string.html',\n      switchTo: '@tag.$S2.$4'\n    }, 'string.html']], [/(type)(\\s*=\\s*)(')([^']+)(')/, ['attribute.name.html', 'delimiter.html', 'string.html', {\n      token: 'string.html',\n      switchTo: '@tag.$S2.$4'\n    }, 'string.html']], [/(\\w+)(\\s*=\\s*)(\"[^\"]*\"|'[^']*')/, ['attribute.name.html', 'delimiter.html', 'string.html']], [/\\w+/, 'attribute.name.html'], [/\\/>/, 'tag', '@pop'], [/>/, {\n      cases: {\n        '$S2==style': {\n          token: 'tag',\n          switchTo: 'embeddedStyle',\n          nextEmbedded: 'text/css'\n        },\n        '$S2==script': {\n          cases: {\n            '$S3': {\n              token: 'tag',\n              switchTo: 'embeddedScript',\n              nextEmbedded: '$S3'\n            },\n            '@default': {\n              token: 'tag',\n              switchTo: 'embeddedScript',\n              nextEmbedded: 'text/javascript'\n            }\n          }\n        },\n        '@default': {\n          token: 'tag',\n          next: '@pop'\n        }\n      }\n    }]],\n    embeddedStyle: [[/[^<]+/, ''], [/<\\/style\\s*>/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/</, '']],\n    embeddedScript: [[/[^<]+/, ''], [/<\\/script\\s*>/, {\n      token: '@rematch',\n      next: '@pop',\n      nextEmbedded: '@pop'\n    }], [/</, '']]\n  }\n};"],"sourceRoot":""}